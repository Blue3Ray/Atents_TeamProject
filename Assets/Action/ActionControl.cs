//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Action/ActionControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ActionControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ActionControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ActionControl"",
    ""maps"": [
        {
            ""name"": ""ClickAction"",
            ""id"": ""da6c30d1-972d-4ba2-9871-23c675552815"",
            ""actions"": [
                {
                    ""name"": ""Mouse_Left"",
                    ""type"": ""Button"",
                    ""id"": ""aab923d3-f35f-47a6-a0ce-a69259214274"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""52e25fe6-c7f7-4b13-ac1b-567d6681ab44"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""739b21b2-8c5c-4d07-8bb5-5b32b9793a88"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Click"",
                    ""action"": ""Mouse_Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be159371-4559-49da-a3dd-d03ee338a458"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f7aaff1-e66a-4f89-98bb-93080ca48a48"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af4700aa-05dc-48d2-907a-a2de4655feed"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f0c3895-22ec-4bd7-9208-78af28d211d4"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2fff761-4fe0-472d-b604-85a8298c2001"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MouseEvent"",
            ""id"": ""3ba1f31d-c944-46f7-9eb2-06fe98d5b2b2"",
            ""actions"": [
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""d6c5589c-4128-4a6a-9838-011676f6931c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c175f29e-1eed-487d-b357-9f1ff7943f6d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Click"",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Click"",
            ""bindingGroup"": ""Click"",
            ""devices"": []
        }
    ]
}");
        // ClickAction
        m_ClickAction = asset.FindActionMap("ClickAction", throwIfNotFound: true);
        m_ClickAction_Mouse_Left = m_ClickAction.FindAction("Mouse_Left", throwIfNotFound: true);
        m_ClickAction_Attack = m_ClickAction.FindAction("Attack", throwIfNotFound: true);
        // MouseEvent
        m_MouseEvent = asset.FindActionMap("MouseEvent", throwIfNotFound: true);
        m_MouseEvent_MouseClick = m_MouseEvent.FindAction("MouseClick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ClickAction
    private readonly InputActionMap m_ClickAction;
    private List<IClickActionActions> m_ClickActionActionsCallbackInterfaces = new List<IClickActionActions>();
    private readonly InputAction m_ClickAction_Mouse_Left;
    private readonly InputAction m_ClickAction_Attack;
    public struct ClickActionActions
    {
        private @ActionControl m_Wrapper;
        public ClickActionActions(@ActionControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouse_Left => m_Wrapper.m_ClickAction_Mouse_Left;
        public InputAction @Attack => m_Wrapper.m_ClickAction_Attack;
        public InputActionMap Get() { return m_Wrapper.m_ClickAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ClickActionActions set) { return set.Get(); }
        public void AddCallbacks(IClickActionActions instance)
        {
            if (instance == null || m_Wrapper.m_ClickActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ClickActionActionsCallbackInterfaces.Add(instance);
            @Mouse_Left.started += instance.OnMouse_Left;
            @Mouse_Left.performed += instance.OnMouse_Left;
            @Mouse_Left.canceled += instance.OnMouse_Left;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
        }

        private void UnregisterCallbacks(IClickActionActions instance)
        {
            @Mouse_Left.started -= instance.OnMouse_Left;
            @Mouse_Left.performed -= instance.OnMouse_Left;
            @Mouse_Left.canceled -= instance.OnMouse_Left;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
        }

        public void RemoveCallbacks(IClickActionActions instance)
        {
            if (m_Wrapper.m_ClickActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IClickActionActions instance)
        {
            foreach (var item in m_Wrapper.m_ClickActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ClickActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ClickActionActions @ClickAction => new ClickActionActions(this);

    // MouseEvent
    private readonly InputActionMap m_MouseEvent;
    private List<IMouseEventActions> m_MouseEventActionsCallbackInterfaces = new List<IMouseEventActions>();
    private readonly InputAction m_MouseEvent_MouseClick;
    public struct MouseEventActions
    {
        private @ActionControl m_Wrapper;
        public MouseEventActions(@ActionControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseClick => m_Wrapper.m_MouseEvent_MouseClick;
        public InputActionMap Get() { return m_Wrapper.m_MouseEvent; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseEventActions set) { return set.Get(); }
        public void AddCallbacks(IMouseEventActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseEventActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseEventActionsCallbackInterfaces.Add(instance);
            @MouseClick.started += instance.OnMouseClick;
            @MouseClick.performed += instance.OnMouseClick;
            @MouseClick.canceled += instance.OnMouseClick;
        }

        private void UnregisterCallbacks(IMouseEventActions instance)
        {
            @MouseClick.started -= instance.OnMouseClick;
            @MouseClick.performed -= instance.OnMouseClick;
            @MouseClick.canceled -= instance.OnMouseClick;
        }

        public void RemoveCallbacks(IMouseEventActions instance)
        {
            if (m_Wrapper.m_MouseEventActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseEventActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseEventActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseEventActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseEventActions @MouseEvent => new MouseEventActions(this);
    private int m_ClickSchemeIndex = -1;
    public InputControlScheme ClickScheme
    {
        get
        {
            if (m_ClickSchemeIndex == -1) m_ClickSchemeIndex = asset.FindControlSchemeIndex("Click");
            return asset.controlSchemes[m_ClickSchemeIndex];
        }
    }
    public interface IClickActionActions
    {
        void OnMouse_Left(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface IMouseEventActions
    {
        void OnMouseClick(InputAction.CallbackContext context);
    }
}
